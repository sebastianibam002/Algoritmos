#include <string>

template<typename VT>
struct KeyValueNode
{
  std::string key;
  VT value;
  KeyValueNode<VT> *next;
};

template <typename VT>
class HashMap
{
private:
  KeyValueNode<VT> **table;
  int table_size;
  int count;

  int hash_fun(std::string key);
  KeyValueNode<VT>* search_bucket(int i, std::string key);

public:
  HashMap();
  ~HashMap();

  int size();
  bool empty();
  void clear();
  void insert(std::string key, VT value);
  VT get(std::string key);
  bool contains(std::string key);
  void remove(std::string key);

  /******/
  void display();
  /*******/
};


//constructor
template<typename VT> 
HashMap::HasMap()
{
  KeyValueNode<VT> **table = new KeyValueNode<VT>[table_size];
  count = 0;
}
